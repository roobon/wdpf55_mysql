CREATE DATABASE databasename;

#### Relationship  ##############
CREATE TABLE orders (
   orderid INT PRIMARY KEY AUTO_INCREMENT,
    ordernumber INT NOT NULL,
    personid INT NOT NULL,
    FOREIGN KEY (personid) REFERENCES persons(PersonID)
);

##### UNIQUE or No duplicate #######
ALTER TABLE persons
ADD UNIQUE(email_address);


CREATE TABLE Persons1 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Dhaka'
);

CREATE INDEX fnameindex
ON persons(FirstName)

SELECT * FROM employees

SELECT `employeeNumber`, `lastName`, `firstName`, `email` FROM `employees`

SELECT `employeeNumber`, `lastName`, `firstName`, `email`, jobTitle FROM `employees` WHERE employeeNumber=1056; 

SELECT `employeeNumber`, `lastName`, `firstName`, `email`, jobTitle FROM `employees` WHERE lastName='Patterson'; 

SELECT `employeeNumber`, `lastName`, `firstName`, `email`, jobTitle FROM `employees` WHERE jobTitle='Sales Rep'; 

SELECT DISTINCT officeCode FROM `employees`; 
SELECT * FROM `employees` WHERE officeCode='1'

SELECT * FROM `employees` WHERE officeCode='1' OR officeCode='2'; 

SELECT * FROM `employees` WHERE officeCode BETWEEN 1 AND 3;

SELECT * FROM `employees` ORDER BY employeeNumber desc; 

SELECT * FROM `employees` ORDER BY lastName, firstName; 

UPDATE employees SET lastName='Ahmed', firstName='Masum', email='masum@gmail.com' WHERE employeeNumber=1002


############################# Mysql Views ###############################




SELECT customers.customerNumber, customerName, phone, city, orderNumber, orderDate, status FROM customers, orders WHERE customers.customerNumber = orders.customerNumber;

SELECT customers.customerNumber, customerName, phone, city, orderNumber, orderDate, status FROM customers, orders WHERE customers.customerNumber = orders.customerNumber AND status!='Shipped'; 


====== 2 tables condition =========
SELECT customerNumber, customerName, phone, addressLine1, addressLine2, orderNumber, quantityOrdered, products.productCode, priceEach, productName FROM customers, orderdetails, products WHERE orderdetails.productCode=products.productCode;


==== 2 tables condition with Total price ====== 
SELECT customerNumber, customerName, phone, addressLine1, addressLine2, orderNumber, quantityOrdered, products.productCode,productName, priceEach, quantityOrdered * priceEach AS Total FROM customers, orderdetails, products WHERE orderdetails.productCode=products.productCode;



=============== Create View ===============
CREATE VIEW customers_orders_view AS
SELECT customers.customerNumber, customerName AS "Customer Name", phone, city, SUM(quantityOrdered) AS 'Total Orders', SUM(quantityOrdered * priceEach) AS 'Total Price' FROM customers, orders, products, orderdetails WHERE customers.customerNumber = orders.customerNumber AND orders.orderNumber = orderdetails.orderNumber AND orderdetails.productCode = products.productCode GROUP BY customerNumber;



=============== 2 tables views ==============

SELECT manufactural.mid, company_name, company_address, company_contact, pid, p_name FROM manufactural, products WHERE manufactural.mid = products.mid;


=============== create views tables ============
CREATE VIEW manufactural_products_view AS
SELECT manufactural.mid, company_name, company_address, company_contact, pid, p_name FROM manufactural, products WHERE manufactural.mid = products.mid;



========================= mysql joins ============================

CREATE TABLE members (
    member_id INT AUTO_INCREMENT,
    name VARCHAR(100),
    PRIMARY KEY (member_id)
);

CREATE TABLE committees (
    committee_id INT AUTO_INCREMENT,
    name VARCHAR(100),
    PRIMARY KEY (committee_id)
);


INSERT INTO members(name)
VALUES('John'),('Jane'),('Mary'),('David'),('Amelia');

INSERT INTO committees(name)
VALUES('John'),('Mary'),('Amelia'),('Joe');

SELECT 
    m.member_id, 
    m.name AS member, 
    c.committee_id, 
    c.name AS committee
FROM
    members m
INNER JOIN committees c ON c.name = m.name;

SELECT 
    m.member_id, 
    m.name AS member, 
    c.committee_id, 
    c.name AS committee
FROM
    members m
INNER JOIN committees c USING(name);


### database manualy ####

SELECT m.member_id, m.name, c.committee_id, c.name AS committee
FROM members m
INNER JOIN committees c ON m.name = c.name;



SELECT m.member_id, m.name, c.committee_id, c.name AS committee
FROM members m
INNER JOIN committees c WHERE m.name = c.name;
